<application>
  <component name="AppStorage">
    <histories>
      <item value="组件" />
      <item value="Consolidated" />
      <item value="fail" />
      <item value="remove shop name in order detail" />
      <item value="allowobfuscation" />
      <item value="If the superclass is a parameterized type, the {@code Type} * object returned must accurately reflect the actual type * parameters used in the source code. The parameterized type * representing the superclass is created if it had not been * created before. See the declaration of {@link * java.lang.reflect.ParameterizedType ParameterizedType} for the * semantics of the creation process for parameterized types. If * this {@code Class} represents either the {@code Object} * class, an interface, a primitive type, or void, then null is * returned. If this object represents an array class then the * {@code Class} object representing the {@code Object} class is * returned." />
      <item value="Returns the {@code Type} representing the direct superclass of * the entity (class, interface, primitive type or void) represented by * this {@code Class}." />
      <item value="Returns the canonical name of the underlying class as * defined by the Java Language Specification. Returns null if * the underlying class does not have a canonical name (i.e., if * it is a local or anonymous class or an array whose component * type does not have a canonical name). * @return the canonical name of the underlying class if it exists, and * {@code null} otherwise." />
      <item value="precision" />
      <item value="vertex" />
      <item value="Vertices" />
      <item value="If set, and the activity being launched is already running in the * current task, then instead of launching a new instance of that activity, * all of the other activities on top of it will be closed and this Intent * will be delivered to the (now on top) old activity as a new Intent." />
      <item value="Removes the mapping for the specified key from this map if present." />
      <item value="total price to two decimal places" />
      <item value="Triangle" />
      <item value="The renderer only renders * when the surface is created, or when {@link #requestRender} is called." />
      <item value="The renderer is called * continuously to re-render the scene." />
      <item value="处理中" />
      <item value="没有考虑到头布局" />
      <item value="考虑头布局" />
      <item value="add contact server groupId choosing logic" />
      <item value="choosing" />
      <item value="add contact server groupId choose logic" />
      <item value="receive" />
      <item value="接受" />
      <item value="set Touch Modal" />
      <item value="This will only be called when the dialog is canceled, if the creator * needs to know when it is dismissed in general, use" />
      <item value="Interface used to allow the creator of a dialog to run some code when the * dialog is canceled." />
      <item value="尖的" />
      <item value="角" />
      <item value="直" />
      <item value="直角" />
      <item value="Valid" />
      <item value="State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}, set when a view or drawable is considered &quot;active&quot; by its host. Actual usage may vary between views. Consult the host view documentation for details. --&gt;" />
      <item value="State value for {@link android.graphics.drawable.StateListDrawable StateListDrawable}, set when a view or its parent has been &quot;activated&quot; meaning the user has currently marked it as being of interest. This is an alternative representation of state_checked for when the state should be propagated down the view hierarchy." />
      <item value="Changes the activated state of this view. A view can be activated or not. * Note that activation is not the same as selection. Selection is * a transient property, representing the view (hierarchy) the user is * currently interacting with. Activation is a longer-term state that the * user can move views in and out of. For example, in a list view with * single or multiple selection enabled, the views in the current selection * set are activated. (Um, yeah, we are deeply sorry about the terminology * here.) The activated state is propagated down to children of the view it * is set on. *" />
      <item value="对接" />
      <item value="The amount of horizontal scroll." />
      <item value="Spans of type SPAN_INCLUSIVE_INCLUSIVE expand * to include text inserted at either their starting or ending point." />
      <item value="Spans of type SPAN_EXCLUSIVE_EXCLUSIVE do not expand * to include text inserted at either their starting or ending point. * They can never have a length of 0 and are automatically removed * from the buffer if all the text they cover is removed." />
      <item value="不完整" />
      <item value="消费者" />
      <item value="Display the content view in a popup window at the specified location. If the popup window * cannot fit on screen, it will be clipped. See {@link android.view.WindowManager.LayoutParams} * for more information on how gravity and the x and y parameters are related. Specifying * a gravity of {@link android.view.Gravity#NO_GRAVITY} is similar to specifying * &lt;code&gt;Gravity.LEFT | Gravity.TOP&lt;/code&gt;." />
      <item value="Returns a view of the portion of this list between the specified [fromIndex] (inclusive) and [toIndex] (exclusive). * The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa. * * Structural changes in the base list make the behavior of the view undefined." />
      <item value="Sparse Array" />
      <item value="Option" />
      <item value="Denotes that the annotated element should be a float or double in the given range" />
      <item value="Override this method to provide a particular target view for snapping. * &lt;p&gt; * This method is called when the {@link SnapHelper} is ready to start snapping and requires * a target view to snap to. It will be explicitly called when the scroll state becomes idle * after a scroll. It will also be called when the {@link SnapHelper} is preparing to snap * after a fling and requires a reference view from the current set of child views. * &lt;p&gt; * If this method returns {@code null}, SnapHelper will not snap to any view." />
      <item value="the target view to which to snap on fling or end of scroll" />
      <item value="shelf" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="103" />
        <entry key="ENGLISH" value="574" />
        <entry key="CHINESE_TRADITIONAL" value="281" />
        <entry key="ALBANIAN" value="1" />
        <entry key="DANISH" value="1" />
        <entry key="FRENCH" value="6" />
        <entry key="CATALAN" value="1" />
        <entry key="CROATIAN" value="1" />
        <entry key="LATIN" value="1" />
        <entry key="SAMOAN" value="1" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="CHINESE_TRADITIONAL" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5035e0423bd01874" />
      </youdao-translate>
    </option>
  </component>
</application>