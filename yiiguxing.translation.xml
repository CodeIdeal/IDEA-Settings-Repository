<application>
  <component name="AppStorage">
    <histories>
      <item value="persist" />
      <item value="Choses" />
      <item value="Chose" />
      <item value="Copies an array from the specified source array, beginning at the * specified position, to the specified position of the destination array. * A subsequence of array components are copied from the source * array referenced by &lt;code&gt;src&lt;/code&gt; to the destination array * referenced by &lt;code&gt;dest&lt;/code&gt;. The number of components copied is * equal to the &lt;code&gt;length&lt;/code&gt; argument. The components at * positions &lt;code&gt;srcPos&lt;/code&gt; through * &lt;code&gt;srcPos+length-1&lt;/code&gt; in the source array are copied into * positions &lt;code&gt;destPos&lt;/code&gt; through * &lt;code&gt;destPos+length-1&lt;/code&gt;, respectively, of the destination * array. * &lt;p&gt; * If the &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;dest&lt;/code&gt; arguments refer to the * same array object, then the copying is performed as if the * components at positions &lt;code&gt;srcPos&lt;/code&gt; through * &lt;code&gt;srcPos+length-1&lt;/code&gt; were first copied to a temporary * array with &lt;code&gt;length&lt;/code&gt; components and then the contents of * the temporary array were copied into positions * &lt;code&gt;destPos&lt;/code&gt; through &lt;code&gt;destPos+length-1&lt;/code&gt; of the * destination array. * &lt;p&gt; * If &lt;code&gt;dest&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then a * &lt;code&gt;NullPointerException&lt;/code&gt; is thrown. * &lt;p&gt; * If &lt;code&gt;src&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, then a * &lt;code&gt;NullPointerException&lt;/code&gt; is thrown and the destination * array is not modified. * &lt;p&gt; * Otherwise, if any of the following is true, an * &lt;code&gt;ArrayStoreException&lt;/code&gt; is thrown and the destination is * not modified: * &lt;ul&gt; * &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument refers to an object that is not an * array. * &lt;li&gt;The &lt;code&gt;dest&lt;/code&gt; argument refers to an object that is not an * array. * &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument and &lt;code&gt;dest&lt;/code&gt; argument refer * to arrays whose component types are different primitive types. * &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a primitive * component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array * with a reference component type. * &lt;li&gt;The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a reference * component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array * with a primitive component type. * &lt;/ul&gt; * &lt;p&gt; * Otherwise, if any of the following is true, an * &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; is * thrown and the destination is not modified: * &lt;ul&gt; * &lt;li&gt;The &lt;code&gt;srcPos&lt;/code&gt; argument is negative. * &lt;li&gt;The &lt;code&gt;destPos&lt;/code&gt; argument is negative. * &lt;li&gt;The &lt;code&gt;length&lt;/code&gt; argument is negative. * &lt;li&gt;&lt;code&gt;srcPos+length&lt;/code&gt; is greater than * &lt;code&gt;src.length&lt;/code&gt;, the length of the source array. * &lt;li&gt;&lt;code&gt;destPos+length&lt;/code&gt; is greater than * &lt;code&gt;dest.length&lt;/code&gt;, the length of the destination array. * &lt;/ul&gt; * &lt;p&gt; * Otherwise, if any actual component of the source array from * position &lt;code&gt;srcPos&lt;/code&gt; through * &lt;code&gt;srcPos+length-1&lt;/code&gt; cannot be converted to the component * type of the destination array by assignment conversion, an * &lt;code&gt;ArrayStoreException&lt;/code&gt; is thrown. In this case, let * &lt;b&gt;&lt;i&gt;k&lt;/i&gt;&lt;/b&gt; be the smallest nonnegative integer less than * length such that &lt;code&gt;src[srcPos+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;]&lt;/code&gt; * cannot be converted to the component type of the destination * array; when the exception is thrown, source array components from * positions &lt;code&gt;srcPos&lt;/code&gt; through * &lt;code&gt;srcPos+&lt;/code&gt;&lt;i&gt;k&lt;/i&gt;&lt;code&gt;-1&lt;/code&gt; * will already have been copied to destination array positions * &lt;code&gt;destPos&lt;/code&gt; through * &lt;code&gt;destPos+&lt;/code&gt;&lt;i&gt;k&lt;/I&gt;&lt;code&gt;-1&lt;/code&gt; and no other * positions of the destination array will have been modified. * (Because of the restrictions already itemized, this * paragraph effectively applies only to the situation where both * arrays have component types that are reference types.)" />
      <item value="Adds all of the elements in the specified collection to this collection * (optional operation). The behavior of this operation is undefined if * the specified collection is modified while the operation is in progress. * (This implies that the behavior of this call is undefined if the * specified collection is this collection, and this collection is * nonempty.)" />
      <item value="smooth scrollbar enabled. try to estimate better." />
      <item value="estimate" />
      <item value="&lt;p&gt;Compute the horizontal range that the horizontal scrollbar represents.&lt;/p&gt; * * &lt;p&gt;The range is expressed in arbitrary units that must be the same as the units used by * {@link #computeHorizontalScrollExtent()} and {@link #computeHorizontalScrollOffset()}.&lt;/p&gt; * * &lt;p&gt;Default implementation returns 0.&lt;/p&gt; * * &lt;p&gt;If you want to support scroll bars, override * {@link RecyclerView.LayoutManager#computeHorizontalScrollRange(RecyclerView.State)} in your * LayoutManager.&lt;/p&gt; * * @return The total horizontal range represented by the vertical scrollbar * @see RecyclerView.LayoutManager#computeHorizontalScrollRange(RecyclerView.State)" />
      <item value="Cancels traffic or emergency announcement" />
      <item value="激活" />
      <item value="the initial number of permits available. * This value may be negative, in which case releases * must occur before any acquires will be granted." />
      <item value="Semaphore" />
      <item value="异常" />
      <item value="Recognizing" />
      <item value="aid" />
      <item value="bind" />
      <item value="Bound" />
      <item value="invalid" />
      <item value="braces and semicolons" />
      <item value="An umbrella container for several serializable graphics representations, including Bitmaps, * compressed bitmap images (e.g. JPG or PNG), and drawable resources (including vectors). * * &lt;a href=&quot;https://developer.android.com/training/displaying-bitmaps/index.html&quot;&gt;Much ink&lt;/a&gt; * has been spilled on the best way to load images, and many clients may have different needs when * it comes to threading and fetching. This class is therefore focused on encapsulation rather than * behavior." />
      <item value="ensure that any current Drawable received in {@link #onResourceReady(Object, * Transition)} is no longer used before redrawing the container (usually a View) or changing its * visibility." />
      <item value="A &lt;b&gt;mandatory&lt;/b&gt; lifecycle callback that is called when a load is cancelled and its resources * are freed." />
      <item value="Millis" />
      <item value="停用" />
      <item value="双倍" />
      <item value="UNKNOW" />
      <item value="invocation" />
      <item value="Relation" />
      <item value="gender" />
      <item value="过户" />
      <item value="guo" />
      <item value="assigned" />
      <item value="in Valid" />
      <item value="Returns milliseconds since boot, including time spent in sleep." />
      <item value="valid" />
      <item value="vaild" />
      <item value="tourist" />
      <item value="Offline" />
      <item value="Electric" />
      <item value="automated" />
      <item value="handle" />
      <item value="update" />
      <item value="indices" />
      <item value="Cascade" />
      <item value="汉字" />
      <item value="手动" />
      <item value="If set in an Intent passed to {@link Context#startActivity Context.startActivity()}, * this flag will cause the launched activity to be brought to the front of its * task's history stack if it is already running. * * &lt;p&gt;For example, consider a task consisting of four activities: A, B, C, D. * If D calls startActivity() with an Intent that resolves to the component * of activity B, then B will be brought to the front of the history stack, * with this resulting order: A, C, D, B. * * This flag will be ignored if {@link #FLAG_ACTIVITY_CLEAR_TOP} is also * specified." />
      <item value="A Live" />
      <item value="TRANSIENT" />
      <item value="The implementation of the method will update its parameters in the database if they already * exists (checked by primary keys). If they don't already exists, this option will not change the * database." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="70" />
        <entry key="ENGLISH" value="291" />
        <entry key="CHINESE_TRADITIONAL" value="71" />
        <entry key="ALBANIAN" value="1" />
        <entry key="FRENCH" value="4" />
        <entry key="SPANISH" value="1" />
      </map>
    </option>
  </component>
  <component name="Settings">
    <option name="googleTranslateSettings">
      <google-translate>
        <option name="primaryLanguage" value="CHINESE_TRADITIONAL" />
      </google-translate>
    </option>
    <option name="ignoreRegExp" value="" />
    <option name="translator" value="ai.youdao" />
    <option name="youdaoTranslateSettings">
      <youdao-translate>
        <option name="appId" value="5035e0423bd01874" />
        <option name="appKeyConfigured" value="true" />
      </youdao-translate>
    </option>
  </component>
</application>